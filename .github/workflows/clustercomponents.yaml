name: AWS EKS - Cluster components pipeline

on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: "Branch name"
        required: true
        default: "main"
        #type: choice
        #options:
        #  - "main"
        #  - "uae"
      ENVIRONMENT:
        description: "Deployment Environment (dev/stage/prod)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod
          - prduae
      AWS_REGION:
        description: "AWS region to deploy infra"
        required: true
        default: "me-central-1"
        type: choice
        options:
          - "me-central-1"
          - "us-east-1"
      EKS_CLUSTER:
        description: "EKS cluster name"
        required: true
        type: choice
        options:
          - "zamp-prd-uae-cluster"
          - "zamp-dev-us-cluster"
      NAMESPACE:
        description: "Namespace"
        required: true
        type: choice
        options:
          - "kube-system"
          - "traefik"
          - "cert-manager"
          - "windmill"
          - "monitoring"
          - "logging"
      HELM_RELEASE:
        description: "Chart to be deployed and templates path"
        required: true
        type: choice
        options:
          - "cert-manager"
          - "external-secrets"
          - "traefik"
          - "windmill"
          - "metrics-server"
          - "prometheus"
          - "grafana"
          - "elasticsearch"
          - "filebeat"
          - "kibana"
          - "karpenter"
          - "loki"
      #TEMPLATES_PATH:
      #  description: "Helm chart templates path"
      #  required: true
      #  type: choice
      #  options:
      #    - "cert-manager/charts/cert-manager"
      #    - "external-secrets"
      #    - "windmill"
      #    - "traefik/charts/traefik"
      #    - "metrics-server"
      #    - "prometheus"
      #    - "grafana"
      #    - "elasticsearch"
      #    - "filebeat"
      #    - "kibana"
      #    - "karpenter"
      #    - "loki"
      VALUES_FILE:
        description: "Values File path"
        required: true
        type: choice
        options:
          - "dev-values.yaml"
          - "prduae-values.yaml"
          - "values.yaml"
          #- "charts/cert-manager/dev-values.yaml --set installCRDs=true"
          #- "charts/cert-manager/prduae-values.yaml --set installCRDs=true"
          #- "charts/traefik/dev-values.yaml"
          #- "charts/traefik/prduae-values.yaml"   

jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ubuntu-latest
    timeout-minutes: 2

    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_RELEASE: ${{ github.event.inputs.HELM_RELEASE }}
      TEMPLATES_PATH: ${{ github.event.inputs.TEMPLATES_PATH }}
      VALUES_FILE: ${{ github.event.inputs.VALUES_FILE }}
    
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.set-account.outputs.AWS_ACCOUNT_ID }}
      BASTION_IP: ${{ steps.set-account.outputs.BASTION_IP }}
    
    steps:
      - name: Determine AWS AccountID based on environment
        id: set-account
        run: |
          case "$ENVIRONMENT" in
            prod)
              ACCOUNT_ID="1122334455"
              BASTION_IP="11.22.33.44"
              ;;
            stage)
              ACCOUNT_ID="123456789"
              BASTION_IP="11.22.33.44"
              ;;
            dev)
              ACCOUNT_ID="913524915637"
              BASTION_IP="54.84.215.139"
              ;;
            prduae)
              ACCOUNT_ID="916079538338" # Replace with actual account ID
              BASTION_IP="11.22.33.44"
              ;;
            *)
              echo "Invalid environment"; exit 1
              ;;
          esac

          echo "aws_account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "bastion_ip=$BASTION_IP" >> "$GITHUB_OUTPUT"
          echo "AWS_ACCOUNT_ID=$ACCOUNT_ID" >> "$GITHUB_ENV"
          echo "BASTION_IP=$BASTION_IP" >> "$GITHUB_ENV"

      - name: Print selected values
        run: |
          echo "Branch: $BRANCH"
          echo "Environment: $ENVIRONMENT"
          echo "AWS Region: $AWS_REGION"
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "EKS cluster: $EKS_CLUSTER"
          echo "Namespace: $NAMESPACE"
          echo "Helm release: $HELM_RELEASE"
          echo "Templates path: $TEMPLATES_PATH"
          echo "Values file: $VALUES_FILE"
          echo "Bastion ip: $BASTION_IP"

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    needs:
      - prepare-env
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ needs.prepare-env.outputs.AWS_ACCOUNT_ID }}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_RELEASE: ${{ github.event.inputs.HELM_RELEASE }}
      TEMPLATES_PATH: ${{ github.event.inputs.TEMPLATES_PATH }}
      VALUES_FILE: ${{ github.event.inputs.VALUES_FILE }}
      BASTION_IP: ${{ needs.prepare-env.outputs.BASTION_IP }}
      BASTION_USER: ${{ secrets.BASTION_USER }}
      BASTION_KEY: ${{ secrets.BASTION_KEY }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.BRANCH }}

      - name: "Set up AWS credentials using OIDC"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: "Set up kubectl"
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

      - name: "Install Helm"
        uses: azure/setup-helm@v4
        with:
          version: "v3.9.0"

      - name: Fetch PEM Key from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            PEM_KEY_ENV_VAR_NAME, bastion-key-secret
            WINDMILL_PASSWORD, zamp-dev-us-windmill-password

      - name: Copy Helm chart to bastion
        run: |
          echo "$PEM_KEY_ENV_VAR_NAME" > /tmp/bastion_key.pem
          chmod 600 /tmp/bastion_key.pem
          scp -i /tmp/bastion_key.pem -o StrictHostKeyChecking=no -r ./k8s-aws/"$HELM_RELEASE" ec2-user@$BASTION_IP:/home/ec2-user/
 
      - name: Write PEM Key to a File
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Upgrade or Install Helm chart with password
        if: ${{ env.HELM_RELEASE == 'windmill' }}
        run: |
          helm upgrade --install "$HELM_RELEASE" ./k8s-aws/"$TEMPLATES_PATH" \
            --namespace "$NAMESPACE" \
            -f ./k8s-aws/"$HELM_RELEASE"/"$VALUES_FILE" \
            --set-string auth.postgresPassword="${{ secrets.DEV_WINDMILL_PASSWORD }}" \
            --set-string auth.rootPassword="${{ secrets.DEV_WINDMILL_PASSWORD }}"

      - name: Install or Upgrade Helm chart
        run: |
          echo "$PEM_KEY_ENV_VAR_NAME" > /tmp/bastion_key.pem
          chmod 600 /tmp/bastion_key.pem
          ssh -i /tmp/bastion_key.pem -o StrictHostKeyChecking=no ec2-user@$BASTION_IP << EOF
          set -e
          sudo su -

          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
          export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN}"
          export AWS_REGION="${AWS_REGION}"
          export EKS_CLUSTER="${EKS_CLUSTER}"
          
          aws sts get-caller-identity

          aws eks update-kubeconfig --region "$AWS_REGION" --name "$EKS_CLUSTER"
          kubectl get nodes
          ls /home/ec2-user
          
          if [ "$HELM_RELEASE" = "windmill" ]; then
            echo "Deploying Windmill with DB password from AWS Secrets Manager"
            helm upgrade --install "$HELM_RELEASE" /home/ec2-user/"$HELM_RELEASE" \
            --namespace "$NAMESPACE" \
            --create-namespace \
            -f /home/ec2-user/"$HELM_RELEASE"/"$VALUES_FILE" \
            --set-string postgresql.auth.postgresPassword="${WINDMILL_PASSWORD}" \
            --set postgresql.primary.persistence.storageClass="gp3"

          elif [ "$HELM_RELEASE" = "cert-manager" ]; then
            echo "Deploying Cert-Manager with CRDs"
            helm upgrade --install "$HELM_RELEASE" /home/ec2-user/cert-manager/charts/"$HELM_RELEASE" \
              --namespace "$NAMESPACE" \
              --create-namespace \
              -f /home/ec2-user/"$HELM_RELEASE"/charts/cert-manager/"$VALUES_FILE" \
              --set installCRDs=true

          elif [ "$HELM_RELEASE" = "traefik" ]; then
            echo "Deploying Traefik"
            helm upgrade --install "$HELM_RELEASE" /home/ec2-user/traefik/charts/"$HELM_RELEASE" \
              --namespace "$NAMESPACE" \
              --create-namespace \
              -f /home/ec2-user/"$HELM_RELEASE"/charts/traefik/"$VALUES_FILE"

          else
            echo "Deploying $HELM_RELEASE"
            helm upgrade --install "$HELM_RELEASE" /home/ec2-user/"$HELM_RELEASE" \
              --namespace "$NAMESPACE" \
              --create-namespace \
              -f /home/ec2-user/"$HELM_RELEASE"/"$VALUES_FILE"
              fi
          
          sleep 60

          rm -rf /home/ec2-user/"$HELM_RELEASE"
          EOF
