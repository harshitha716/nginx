pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "your-ecr-repo-name/sample-app"
        AWS_REGION = "us-west-2"
        ECR_REPO_URI = "123456789012.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE}"
        SONARQUBE_URL = "http://sonarqube.example.com"
        SONARQUBE_CREDENTIALS = "sonarqube-credentials"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'f87a34a8-0e09-45e7-b9cf-6dc68feac670', 
                url: 'https://github.com/harshitha716/nginx',
                branch: 'main'
            }
        }

        stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd nginx/nginx-app && mvn clean package'
      }

        stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://18.212.88.43:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd nginx/nginx-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

       stage('Build and Push Docker Image') {
        steps {
        script {
            sh 'cd nginx/nginx-app && docker build -t ${DOCKER_IMAGE} .'
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 200901485389.dkr.ecr.us-east-1.amazonaws.com
            docker tag harshitha-ecr:latest 200901485389.dkr.ecr.us-east-1.amazonaws.com/harshitha-ecr:latest
            docker push 200901485389.dkr.ecr.us-east-1.amazonaws.com/harshitha-ecr:latest
            }
        }
      }
    }


        stage('Deploy to EKS with ArgoCD') {
            steps {
                script {
                    // Trigger ArgoCD deployment (assuming you have an ArgoCD application set up)
                    sh """
                     kubectl apply -f deployment.yaml 
                     kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG 
                     kubectl rollout status deployment/$DEPLOYMENT_NAME 

                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
