pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sample-app"
        AWS_REGION = "us-east-2"
        ECR_REPO_URI = "842675998483.dkr.ecr.us-east-2.amazonaws.com/harshitha"
        GIT_REPO_URL = 'https://github.com/harshitha716/nginx.git'
        GIT_BRANCH = 'main' // Set the branch you want to deploy from
        ECR_REGION = 'us-east-2' // Replace with your AWS region
        AWS_ACCESS_KEY_ID =  'AKIA4IM3HJ4JRD3KTLLL'
        AWS_SECRET_ACCESS_KEY = 'WX5+6wyw+rEuMWiCNCzmNpOgnz4mRH6AyQz4+FJi'
        AWS_DEFAULT_REGION = 'us-east-2'
        ARGOCD_SERVER = 'https://localhost:8080'
        ARGOCD_APP_NAME = 'your-application-name'
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Correct git checkout syntax
                checkout([$class: 'GitSCM', 
                    branches: [[name: "*/${GIT_BRANCH}"]], 
                    userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]
                ])
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'cd nginx/nginx-app && docker build -t ${DOCKER_IMAGE} .'
                    sh 'aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}'
                    sh 'docker tag ${DOCKER_IMAGE}:latest ${ECR_REPO_URI}:${DOCKER_IMAGE}:latest'
                    sh 'docker push ${ECR_REPO_URI}:${DOCKER_IMAGE}:latest'
                }
            }
        }

        stage('Deploy to EKS with ArgoCD') {
            steps {
                script {
                    // Trigger ArgoCD deployment (assuming you have an ArgoCD application set up)
                    sh """
                    kubectl apply -f deployment.yaml 
                    kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$ECR_REPO_URI/$DOCKER_IMAGE:latest 
                    kubectl rollout status deployment/$DEPLOYMENT_NAME 
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
